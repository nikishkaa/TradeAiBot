import requests
import json
import os
import threading
import time
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
PROXYAPI_KEY = os.getenv("PROXYAPI_KEY")
PROXYAPI_URL = os.getenv("PROXYAPI_URL")
AI_MODEL = os.getenv("AI_MODEL", "gpt-3.5-turbo")
CRYPTO_API_URL = os.getenv("CRYPTO_API_URL")
CRYPTO_IDS = os.getenv("CRYPTO_IDS", "bitcoin,ethereum,cardano").split(",")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Chat ID
chat_id = None
CHAT_ID_FILE = "chat_id.txt"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Chat ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
ANALYSIS_INTERVAL_SECONDS = 3600
scheduler_running = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    log_filename = f"trading_bot_{datetime.now().strftime('%Y%m%d')}.log"
    logging.basicConfig(
        level=logging.ERROR,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logging()


def format_interval(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"–∫–∞–∂–¥—ã–µ {seconds} —Å–µ–∫"
    elif seconds < 3600:
        return f"–∫–∞–∂–¥—ã–µ {seconds // 60} –º–∏–Ω"
    elif seconds < 86400:
        return f"–∫–∞–∂–¥—ã–π {seconds // 3600} —á–∞—Å"
    else:
        return f"–∫–∞–∂–¥—ã–π {seconds // 86400} –¥–µ–Ω—å"


class TradingBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.load_chat_id()

    def load_chat_id(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Chat ID –∏–∑ —Ñ–∞–π–ª–∞"""
        global chat_id
        try:
            if os.path.exists(CHAT_ID_FILE):
                with open(CHAT_ID_FILE, 'r') as f:
                    chat_id = f.read().strip()
                    print(f"üì± –ó–∞–≥—Ä—É–∂–µ–Ω Chat ID: {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Chat ID: {e}")
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Chat ID: {e}")

    def save_chat_id(self, chat_id_value):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç Chat ID –≤ —Ñ–∞–π–ª"""
        try:
            with open(CHAT_ID_FILE, 'w') as f:
                f.write(str(chat_id_value))
            print(f"üíæ Chat ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {chat_id_value}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Chat ID: {e}")
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Chat ID: {e}")

    def get_crypto_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
        try:
            params = {
                'ids': ','.join(CRYPTO_IDS),
                'vs_currencies': 'usd',
                'include_24hr_change': 'true'
            }
            response = requests.get(CRYPTO_API_URL, params=params)
            data = response.json()
            return data
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"

    def analyze_with_proxyapi(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é ProxyAPI"""
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:
            {json.dumps(data, indent=2, ensure_ascii=False)}

            –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞.
            """

            headers = {
                "Authorization": f"Bearer {PROXYAPI_KEY}",
                "Content-Type": "application/json"
            }

            payload = {
                "model": AI_MODEL,
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 200
            }

            response = requests.post(PROXYAPI_URL, headers=headers, json=payload)
            result = response.json()
            analysis = result.get('choices', [{}])[0].get('message', {}).get('content', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
            return analysis
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

    def send_message_sync(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        global chat_id
        if chat_id is None:
            print("Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    def hourly_analysis_sync(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        print("–í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        crypto_data = self.get_crypto_data()
        if isinstance(crypto_data, str):
            self.send_message_sync(f"‚ùå {crypto_data}")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é ProxyAPI
        analysis = self.analyze_with_proxyapi(crypto_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
        for coin, data in crypto_data.items():
            price = data.get('usd', 'N/A')
            change_24h = data.get('usd_24h_change', 'N/A')
            message += f"üí∞ {coin.upper()}: ${price:,.2f} ({change_24h:+.2f}%)\n"

        message += f"\nü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò:\n{analysis}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.send_message_sync(message)

    def scheduler_thread(self):
        """–ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        global scheduler_running
        while scheduler_running:
            time.sleep(ANALYSIS_INTERVAL_SECONDS)
            if scheduler_running and chat_id is not None:
                print("‚è∞ –í—ã–ø–æ–ª–Ω—è—é –ø–ª–∞–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
                self.hourly_analysis_sync()

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        global scheduler_running
        if not scheduler_running:
            scheduler_running = True
            scheduler_thread = threading.Thread(target=self.scheduler_thread, daemon=True)
            scheduler_thread.start()
            interval_text = format_interval(ANALYSIS_INTERVAL_SECONDS)
            print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω ({interval_text})")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        global scheduler_running
        scheduler_running = False
        print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        global chat_id
        if chat_id is None:
            print("Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        try:
            await self.bot.send_message(chat_id=chat_id, text=text)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    async def hourly_analysis(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑"""
        print("–í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        crypto_data = self.get_crypto_data()
        if isinstance(crypto_data, str):
            await self.send_message(f"‚ùå {crypto_data}")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é ProxyAPI
        analysis = self.analyze_with_proxyapi(crypto_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
        for coin, data in crypto_data.items():
            price = data.get('usd', 'N/A')
            change_24h = data.get('usd_24h_change', 'N/A')
            message += f"üí∞ {coin.upper()}: ${price:,.2f} ({change_24h:+.2f}%)\n"

        message += f"\nü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò:\n{analysis}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_message(message)

    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        global chat_id
        chat_id = update.effective_chat.id
        self.save_chat_id(chat_id)
        interval_text = format_interval(ANALYSIS_INTERVAL_SECONDS)
        welcome_message = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot!

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {interval_text}.

üìä –°–µ–π—á–∞—Å –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é: Bitcoin, Ethereum, Cardano
ü§ñ –ê–Ω–∞–ª–∏–∑: —á–µ—Ä–µ–∑ ProxyAPI (GPT-3.5)
‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞: {interval_text}

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/analyze - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–π—á–∞—Å

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!
        """
        await update.message.reply_text(welcome_message)
        print(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è Chat ID: {chat_id}")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.start_scheduler()

    async def status_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        global chat_id, scheduler_running
        if chat_id is None:
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        else:
            status = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if scheduler_running else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            await update.message.reply_text(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\nChat ID: {chat_id}\n–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {status}")

    async def analyze_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...")
        await self.hourly_analysis()

    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        global chat_id
        if chat_id is None:
            chat_id = update.effective_chat.id
            self.save_chat_id(chat_id)
            interval_text = format_interval(ANALYSIS_INTERVAL_SECONDS)
            await update.message.reply_text(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è {interval_text}.")
            print(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è Chat ID: {chat_id}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.start_scheduler()
        else:
            await update.message.reply_text("ü§ñ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")


def main():
    bot = TradingBot()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.app.add_handler(CommandHandler("start", bot.start_command))
    bot.app.add_handler(CommandHandler("status", bot.status_command))
    bot.app.add_handler(CommandHandler("analyze", bot.analyze_command))
    bot.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    print("ü§ñ Trading Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    if chat_id is not None:
     bot.start_scheduler()
    bot.app.run_polling()


if __name__ == "__main__":
    main()
