import requests
import json
import os
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
PROXYAPI_KEY = os.getenv("PROXYAPI_KEY")
PROXYAPI_URL = os.getenv("PROXYAPI_URL")
CRYPTO_API_URL = os.getenv("CRYPTO_API_URL")
CRYPTO_IDS = os.getenv("CRYPTO_IDS", "bitcoin,ethereum,cardano").split(",")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Chat ID
chat_id = None

class TradingBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    def get_crypto_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
        try:
            params = {
                'ids': ','.join(CRYPTO_IDS),
                'vs_currencies': 'usd',
                'include_24hr_change': 'true'
            }
            response = requests.get(CRYPTO_API_URL, params=params)
            return response.json()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
    
    def analyze_with_proxyapi(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é ProxyAPI"""
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:
            {json.dumps(data, indent=2, ensure_ascii=False)}
            
            –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞.
            """
            
            headers = {
                "Authorization": f"Bearer {PROXYAPI_KEY}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 200
            }
            
            response = requests.post(PROXYAPI_URL, headers=headers, json=payload)
            result = response.json()
            return result.get('choices', [{}])[0].get('message', {}).get('content', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
    
    async def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        global chat_id
        if chat_id is None:
            print("Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        try:
            await self.bot.send_message(chat_id=chat_id, text=text)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def hourly_analysis(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑"""
        print("–í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        crypto_data = self.get_crypto_data()
        if isinstance(crypto_data, str):
            await self.send_message(f"‚ùå {crypto_data}")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é ProxyAPI
        analysis = self.analyze_with_proxyapi(crypto_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
        for coin, data in crypto_data.items():
            price = data.get('usd', 'N/A')
            change_24h = data.get('usd_24h_change', 'N/A')
            message += f"üí∞ {coin.upper()}: ${price:,.2f} ({change_24h:+.2f}%)\n"
        
        message += f"\nü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò:\n{analysis}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_message(message)
    
    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        global chat_id
        chat_id = update.effective_chat.id
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot!

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

üìä –°–µ–π—á–∞—Å –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é: Bitcoin, Ethereum, Cardano
ü§ñ –ê–Ω–∞–ª–∏–∑: —á–µ—Ä–µ–∑ ProxyAPI (GPT-3.5)

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/analyze - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–π—á–∞—Å

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!
        """
        await update.message.reply_text(welcome_message)
        print(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è Chat ID: {chat_id}")
    
    async def status_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        global chat_id
        if chat_id is None:
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        else:
            await update.message.reply_text(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\nChat ID: {chat_id}")
    
    async def analyze_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...")
        await self.hourly_analysis()
    
    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        global chat_id
        if chat_id is None:
            chat_id = update.effective_chat.id
            await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            print(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è Chat ID: {chat_id}")
        else:
            await update.message.reply_text("ü§ñ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

def main():
    bot = TradingBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.app.add_handler(CommandHandler("start", bot.start_command))
    bot.app.add_handler(CommandHandler("status", bot.status_command))
    bot.app.add_handler(CommandHandler("analyze", bot.analyze_command))
    bot.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    print("ü§ñ Trading Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì± –ò–º—è –±–æ—Ç–∞: tradeAiiiBot")
    print(f"üîó –°—Å—ã–ª–∫–∞: https://t.me/tradeAiiiBot")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é polling...")
    bot.app.run_polling()

if __name__ == "__main__":
    main() 